/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package org.web3j.klaytnprotocol;
import java.util.concurrent.ScheduledExecutorService;

import org.web3j.protocol.Web3jService;
import org.web3j.protocol.core.JsonRpc2_0Web3j;
import org.web3j.protocol.core.Request;
import org.web3j.protocol.core.methods.response.EthSendTransaction;
import org.web3j.utils.Async;
import opensdk.sdk.apis.GovernanceApi;

public class KlaytnWeb3j extends JsonRpc2_0Web3j{
    public static final int DEFAULT_BLOCK_TIME = 15 * 1000;
    public GovernanceApi governance;

    public KlaytnWeb3j(Web3jService web3jService) {
        this(web3jService, DEFAULT_BLOCK_TIME, Async.defaultExecutorService());
        this.governance = new GovernanceApi(web3jService, DEFAULT_BLOCK_TIME, Async.defaultExecutorService());
    }

    public KlaytnWeb3j(
            Web3jService web3jService,
            long pollingInterval,
            ScheduledExecutorService scheduledExecutorService) {
        super(web3jService, pollingInterval, scheduledExecutorService);
        this.governance = new GovernanceApi(web3jService, pollingInterval, scheduledExecutorService);
    }

    /**
     * Construct a new Web3j instance.
     *
     * @param web3jService web3j service instance - i.e. HTTP or IPC
     * @return new Web3j instance
     */
    static KlaytnWeb3j build(Web3jService web3jService) {
        return new KlaytnWeb3j(web3jService);
    }

    /**
     * Construct a new Web3j instance.
     *
     * @param web3jService web3j service instance - i.e. HTTP or IPC
     * @param pollingInterval polling interval for responses from network nodes
     * @param scheduledExecutorService executor service to use for scheduled tasks. <strong>You are
     *     responsible for terminating this thread pool</strong>
     * @return new Web3j instance
     */
    static KlaytnWeb3j build(
            Web3jService web3jService,
            long pollingInterval,
            ScheduledExecutorService scheduledExecutorService) {
        return new KlaytnWeb3j(web3jService, pollingInterval, scheduledExecutorService);
    }

    @Override
    public Request<?, EthSendTransaction> ethSendRawTransaction(String signedTransactionData) {
        long txType = 0;
        try {
            txType = Long.parseUnsignedLong(signedTransactionData.substring(0, 1), 16);
        } catch (NumberFormatException e) {
            // something
        }
        // Klaytn transaction type
        if(8 <= txType && txType <= 74) {
            return klay.sendRawTransaction(signedTransactionData);
        }
        return super.ethSendRawTransaction(signedTransactionData);
    }
}
